{"version":3,"file":"static/js/263.c9ab2461.chunk.js","mappings":"+IAGA,MAAMA,GAAcC,EAAAA,EAAAA,iBAuCPC,EAAUA,KAAMC,EAAAA,EAAAA,YAAWH,E,oGCpCxC,MA+GMI,EAAS,CACbC,gBAAiB,CACfC,QAAS,OACTC,cAAe,SACfC,eAAgB,SAChBC,WAAY,SACZC,OAAQ,UAGZ,EAxHcC,KACZ,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAUC,IAAeF,EAAAA,EAAAA,UAAS,KAClCG,EAAOC,IAAYJ,EAAAA,EAAAA,UAAS,KAC5BK,EAASC,IAAcN,EAAAA,EAAAA,WAAS,IACjC,MAAEO,EAAK,gBAAEC,IAAoBpB,EAAAA,EAAAA,KAC7BqB,GAAWC,EAAAA,EAAAA,OAGjBC,EAAAA,EAAAA,YAAU,KAMNF,EAAS,WAAW,GAKrB,IAiDH,OACEG,EAAAA,EAAAA,KAAA,OAAKC,UAAU,wEAAuEC,SACnFT,GAAUO,EAAAA,EAAAA,KAAA,OAAKC,UAAU,iBAAiBE,MAAO,CAAEC,SAAU,QAASC,MAAO,QAASH,UACrFI,EAAAA,EAAAA,MAAA,OAAKL,UAAU,YAAWC,SAAA,EACxBF,EAAAA,EAAAA,KAAA,MAAIC,UAAU,yBAAwBC,SAAC,iBACvCI,EAAAA,EAAAA,MAAA,QAAMC,SAvCOC,UACnBC,EAAMC,iBAEN,MAAMC,EAAY,IAAIC,QACtBD,EAAUE,OAAO,eAAgB,oBAEjC,MAKMC,EAAiB,CACrBC,OAAQ,OACRC,QAASL,EACTM,KARUC,KAAKC,UAAU,CACzBjC,MAAOA,EACPG,SAAUA,IAOV+B,SAAU,UAGZ,IACE,MAAMC,QAAiBC,MAAM,mDAAoDR,GAE3ES,QAAeF,EAASG,OAE1BD,EAAOE,OACT9B,EAAM4B,EAAOE,OACb5B,EAAS,aAETL,EAAS,0CAEb,CAAE,MAAOD,GACPC,EAAS,iBAADkC,OAAkBnC,EAAMoC,SAClC,GAQmCzB,SAAA,EAC3BI,EAAAA,EAAAA,MAAA,OAAKL,UAAU,OAAMC,SAAA,EACnBF,EAAAA,EAAAA,KAAA,SAAO4B,QAAQ,QAAQ3B,UAAU,aAAYC,SAAC,WAC9CF,EAAAA,EAAAA,KAAA,SACE6B,KAAK,QACLC,GAAG,QACH7B,UAAU,eACV8B,MAAO7C,EACP8C,SAAWC,GAAM9C,EAAS8C,EAAEC,OAAOH,OACnCI,UAAQ,QAGZ7B,EAAAA,EAAAA,MAAA,OAAKL,UAAU,OAAMC,SAAA,EACnBF,EAAAA,EAAAA,KAAA,SAAO4B,QAAQ,WAAW3B,UAAU,aAAYC,SAAC,cACjDF,EAAAA,EAAAA,KAAA,SACE6B,KAAK,WACLC,GAAG,WACH7B,UAAU,eACV8B,MAAO1C,EACP2C,SAAWC,GAAM3C,EAAY2C,EAAEC,OAAOH,OACtCI,UAAQ,QAGZnC,EAAAA,EAAAA,KAAA,UAAQ6B,KAAK,SAAS5B,UAAU,wBAAuBC,SAAC,UACvDX,IAASS,EAAAA,EAAAA,KAAA,OAAKC,UAAU,0BAA0BmC,KAAK,QAAOlC,SAAEX,aAKrEe,EAAAA,EAAAA,MAAA,OAAKH,MAAOzB,EAAOC,gBAAgBuB,SAAA,EACjCF,EAAAA,EAAAA,KAACqC,EAAAA,EAAO,CAACC,MAAM,aACftC,EAAAA,EAAAA,KAAA,KAAAE,SAAG,mBAGH,C","sources":["routes/AuthContext.js","views/login.js"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\r\n\r\n// Create Context\r\nconst AuthContext = createContext();\r\n\r\n// Create a provider component\r\nexport const AuthProvider = ({ children }) => {\r\n    const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n    const login = (token) => {\r\n        localStorage.setItem('token', token);\r\n\r\n        // Set authentication status to true\r\n        setIsAuthenticated(true);\r\n        // Store authentication token or any relevant info (e.g., localStorage)\r\n        localStorage.setItem('isAuthenticated', 'true');\r\n    };\r\n\r\n    const logout = () => {\r\n        // Set authentication status to false\r\n        setIsAuthenticated(false);\r\n        // Remove authentication token or relevant info\r\n        localStorage.removeItem('isAuthenticated');\r\n        localStorage.removeItem('token');\r\n    };\r\n\r\n    // Check authentication status on initial load\r\n    React.useEffect(() => {\r\n        // const token = localStorage.getItem('isAuthenticated');\r\n        if (1) {\r\n            setIsAuthenticated(true);\r\n        }\r\n    }, []);\r\n\r\n    return (\r\n        <AuthContext.Provider value={{ isAuthenticated, login, logout }}>\r\n            {children}\r\n        </AuthContext.Provider>\r\n    );\r\n};\r\n\r\n// Custom hook to use authentication context\r\nexport const useAuth = () => useContext(AuthContext);\r\n","import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { useAuth } from '../../src/routes/AuthContext'; // Adjust path as needed\r\nimport 'bootstrap/dist/css/bootstrap.min.css'; // Import Bootstrap CSS\r\nimport { Spinner } from \"reactstrap\";\r\n\r\nconst Login = () => {\r\n  const [email, setEmail] = useState('');\r\n  const [password, setPassword] = useState('');\r\n  const [error, setError] = useState('');\r\n  const [loading, setLoading] = useState(false);\r\n  const { login, isAuthenticated } = useAuth();\r\n  const navigate = useNavigate();\r\n\r\n\r\n  useEffect(() => {\r\n    // setLoading(true)\r\n    // console.log('FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF', isAuthenticated);\r\n\r\n    // if (isAuthenticated) {\r\n    //   console.log('CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC', isAuthenticated);\r\n      navigate('/starter'); // Redirect to a protected route or home page\r\n    //   setLoading(false)\r\n    // } else {\r\n    //   checkToken()\r\n    // }\r\n  }, [])\r\n\r\n  const checkToken = () => {\r\n    console.log('qqqqqqqqqqqqqqqqqqqqqqqqqqqqqqq');\r\n\r\n    // const authToken = localStorage.getItem('isAuthenticated');\r\n    // const token = localStorage.getItem('token');\r\n    // console.log('token in Login',token);\r\n    if (1) {\r\n      setLoading(false)\r\n      navigate('/starter');\r\n    }\r\n  }\r\n\r\n\r\n  const handleSubmit = async (event) => {\r\n    event.preventDefault();\r\n\r\n    const myHeaders = new Headers();\r\n    myHeaders.append(\"Content-Type\", \"application/json\");\r\n\r\n    const raw = JSON.stringify({\r\n      email: email,\r\n      password: password\r\n    });\r\n\r\n    const requestOptions = {\r\n      method: \"POST\",\r\n      headers: myHeaders,\r\n      body: raw,\r\n      redirect: \"follow\"\r\n    };\r\n\r\n    try {\r\n      const response = await fetch(\"https://lab.app2serve.com/public/api/admin/login\", requestOptions);\r\n\r\n      const result = await response.json();\r\n\r\n      if (result.token) { // Adjust based on your API's response structure\r\n        login(result.token); // Update authentication status\r\n        navigate('/starter'); // Redirect to a protected route or home page \r\n      } else {\r\n        setError('Login failed: Invalid email or password');\r\n      }\r\n    } catch (error) {\r\n      setError(`Login failed: ${error.message}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"container d-flex justify-content-center align-items-center min-vh-100\">\r\n      {loading ? <div className=\"card shadow-lg\" style={{ maxWidth: '400px', width: '100%' }}>\r\n        <div className=\"card-body\">\r\n          <h3 className=\"card-title text-center\">Admin Login</h3>\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"email\" className=\"form-label\">Email</label>\r\n              <input\r\n                type=\"email\"\r\n                id=\"email\"\r\n                className=\"form-control\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <label htmlFor=\"password\" className=\"form-label\">Password</label>\r\n              <input\r\n                type=\"password\"\r\n                id=\"password\"\r\n                className=\"form-control\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n                required\r\n              />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-primary w-100\">Login</button>\r\n            {error && <div className=\"alert alert-danger mt-3\" role=\"alert\">{error}</div>}\r\n          </form>\r\n        </div>\r\n      </div>\r\n        :\r\n        <div style={styles.loaderContainer}>\r\n          <Spinner color=\"primary\" />\r\n          <p>Loading...</p>\r\n        </div>\r\n      }\r\n    </div>\r\n  );\r\n};\r\nconst styles = {\r\n  loaderContainer: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    height: \"100vh\",\r\n  },\r\n};\r\nexport default Login;\r\n"],"names":["AuthContext","createContext","useAuth","useContext","styles","loaderContainer","display","flexDirection","justifyContent","alignItems","height","Login","email","setEmail","useState","password","setPassword","error","setError","loading","setLoading","login","isAuthenticated","navigate","useNavigate","useEffect","_jsx","className","children","style","maxWidth","width","_jsxs","onSubmit","async","event","preventDefault","myHeaders","Headers","append","requestOptions","method","headers","body","JSON","stringify","redirect","response","fetch","result","json","token","concat","message","htmlFor","type","id","value","onChange","e","target","required","role","Spinner","color"],"sourceRoot":""}